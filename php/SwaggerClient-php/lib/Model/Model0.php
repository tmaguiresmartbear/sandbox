<?php
/**
 * Model0
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Open weather
 *
 * This is my description
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Model0 Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Model0 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coord' => '\Swagger\Client\Model\Coord',
        'weather' => '\Swagger\Client\Model\Weather[]',
        'base' => 'string',
        'main' => '\Swagger\Client\Model\Main',
        'visibility' => 'int',
        'wind' => '\Swagger\Client\Model\Wind',
        'clouds' => '\Swagger\Client\Model\Clouds',
        'dt' => 'int',
        'sys' => '\Swagger\Client\Model\Sys',
        'id' => 'int',
        'name' => 'string',
        'cod' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coord' => null,
        'weather' => null,
        'base' => null,
        'main' => null,
        'visibility' => 'int32',
        'wind' => null,
        'clouds' => null,
        'dt' => 'int32',
        'sys' => null,
        'id' => 'int32',
        'name' => null,
        'cod' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coord' => 'coord',
        'weather' => 'weather',
        'base' => 'base',
        'main' => 'main',
        'visibility' => 'visibility',
        'wind' => 'wind',
        'clouds' => 'clouds',
        'dt' => 'dt',
        'sys' => 'sys',
        'id' => 'id',
        'name' => 'name',
        'cod' => 'cod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coord' => 'setCoord',
        'weather' => 'setWeather',
        'base' => 'setBase',
        'main' => 'setMain',
        'visibility' => 'setVisibility',
        'wind' => 'setWind',
        'clouds' => 'setClouds',
        'dt' => 'setDt',
        'sys' => 'setSys',
        'id' => 'setId',
        'name' => 'setName',
        'cod' => 'setCod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coord' => 'getCoord',
        'weather' => 'getWeather',
        'base' => 'getBase',
        'main' => 'getMain',
        'visibility' => 'getVisibility',
        'wind' => 'getWind',
        'clouds' => 'getClouds',
        'dt' => 'getDt',
        'sys' => 'getSys',
        'id' => 'getId',
        'name' => 'getName',
        'cod' => 'getCod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coord'] = isset($data['coord']) ? $data['coord'] : null;
        $this->container['weather'] = isset($data['weather']) ? $data['weather'] : null;
        $this->container['base'] = isset($data['base']) ? $data['base'] : null;
        $this->container['main'] = isset($data['main']) ? $data['main'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['wind'] = isset($data['wind']) ? $data['wind'] : null;
        $this->container['clouds'] = isset($data['clouds']) ? $data['clouds'] : null;
        $this->container['dt'] = isset($data['dt']) ? $data['dt'] : null;
        $this->container['sys'] = isset($data['sys']) ? $data['sys'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['cod'] = isset($data['cod']) ? $data['cod'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets coord
     *
     * @return \Swagger\Client\Model\Coord
     */
    public function getCoord()
    {
        return $this->container['coord'];
    }

    /**
     * Sets coord
     *
     * @param \Swagger\Client\Model\Coord $coord coord
     *
     * @return $this
     */
    public function setCoord($coord)
    {
        $this->container['coord'] = $coord;

        return $this;
    }

    /**
     * Gets weather
     *
     * @return \Swagger\Client\Model\Weather[]
     */
    public function getWeather()
    {
        return $this->container['weather'];
    }

    /**
     * Sets weather
     *
     * @param \Swagger\Client\Model\Weather[] $weather weather
     *
     * @return $this
     */
    public function setWeather($weather)
    {
        $this->container['weather'] = $weather;

        return $this;
    }

    /**
     * Gets base
     *
     * @return string
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param string $base base
     *
     * @return $this
     */
    public function setBase($base)
    {
        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets main
     *
     * @return \Swagger\Client\Model\Main
     */
    public function getMain()
    {
        return $this->container['main'];
    }

    /**
     * Sets main
     *
     * @param \Swagger\Client\Model\Main $main main
     *
     * @return $this
     */
    public function setMain($main)
    {
        $this->container['main'] = $main;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return int
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param int $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets wind
     *
     * @return \Swagger\Client\Model\Wind
     */
    public function getWind()
    {
        return $this->container['wind'];
    }

    /**
     * Sets wind
     *
     * @param \Swagger\Client\Model\Wind $wind wind
     *
     * @return $this
     */
    public function setWind($wind)
    {
        $this->container['wind'] = $wind;

        return $this;
    }

    /**
     * Gets clouds
     *
     * @return \Swagger\Client\Model\Clouds
     */
    public function getClouds()
    {
        return $this->container['clouds'];
    }

    /**
     * Sets clouds
     *
     * @param \Swagger\Client\Model\Clouds $clouds clouds
     *
     * @return $this
     */
    public function setClouds($clouds)
    {
        $this->container['clouds'] = $clouds;

        return $this;
    }

    /**
     * Gets dt
     *
     * @return int
     */
    public function getDt()
    {
        return $this->container['dt'];
    }

    /**
     * Sets dt
     *
     * @param int $dt dt
     *
     * @return $this
     */
    public function setDt($dt)
    {
        $this->container['dt'] = $dt;

        return $this;
    }

    /**
     * Gets sys
     *
     * @return \Swagger\Client\Model\Sys
     */
    public function getSys()
    {
        return $this->container['sys'];
    }

    /**
     * Sets sys
     *
     * @param \Swagger\Client\Model\Sys $sys sys
     *
     * @return $this
     */
    public function setSys($sys)
    {
        $this->container['sys'] = $sys;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cod
     *
     * @return int
     */
    public function getCod()
    {
        return $this->container['cod'];
    }

    /**
     * Sets cod
     *
     * @param int $cod cod
     *
     * @return $this
     */
    public function setCod($cod)
    {
        $this->container['cod'] = $cod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

